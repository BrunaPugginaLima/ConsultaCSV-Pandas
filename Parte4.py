#Bruna Puggina Lima - ECP - Trechos de código - TG

#Coletando informações (Display) de quantas vezes cada item de uma coluna específica aparece no arquivo da tabela original (UDP) e da tabela formada pelas linhas da tabela original nas quais a coluna lastip6 é nula.

import pandas as pd
pd.set_option('display.max_rows', None) 

mar_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_03_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
abr_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_04_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
mai_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_05_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
jun_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_06_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
jul_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_07_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
ago_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_08_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
set_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_09_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
out_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_10_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
nov_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_11_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
dez_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_12_2019_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
jan_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_01_2020_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])
fev_udp = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Netmetric_02_2020_UDP.csv', usecols=['lastip6', 'conn_tech','osversion','brand', 'end_tech'])

nmarudpv6 = mar_udp.query('lastip6.isnull()', engine='python')
nabrudpv6 = abr_udp.query('lastip6.isnull()', engine='python')
nmaiudpv6 = mai_udp.query('lastip6.isnull()', engine='python')
njunudpv6 = jun_udp.query('lastip6.isnull()', engine='python')
njuludpv6 = jul_udp.query('lastip6.isnull()', engine='python')
nagoudpv6 = ago_udp.query('lastip6.isnull()', engine='python')
nsetudpv6 = set_udp.query('lastip6.isnull()', engine='python')
noutudpv6 = out_udp.query('lastip6.isnull()', engine='python')
nnovudpv6 = nov_udp.query('lastip6.isnull()', engine='python')
ndezudpv6 = dez_udp.query('lastip6.isnull()', engine='python')
njanudpv6 = jan_udp.query('lastip6.isnull()', engine='python')
nfevudpv6 = fev_udp.query('lastip6.isnull()', engine='python')

#OS VERSION
mar_udp.groupby(by='osversion').size()
nmarudpv6.groupby(by='osversion').size()
abr_udp.groupby(by='osversion').size()
nabrudpv6.groupby(by='osversion').size()
mai_udp.groupby(by='osversion').size()
nmaiudpv6.groupby(by='osversion').size()
jun_udp.groupby(by='osversion').size()
njunudpv6.groupby(by='osversion').size()
jul_udp.groupby(by='osversion').size()
njuludpv6.groupby(by='osversion').size()
ago_udp.groupby(by='osversion').size()
nagoudpv6.groupby(by='osversion').size()
set_udp.groupby(by='osversion').size()
nsetudpv6.groupby(by='osversion').size()
out_udp.groupby(by='osversion').size()
noutudpv6.groupby(by='osversion').size()
nov_udp.groupby(by='osversion').size()
nnovudpv6.groupby(by='osversion').size()
dez_udp.groupby(by='osversion').size()
ndezudpv6.groupby(by='osversion').size()
jan_udp.groupby(by='osversion').size()
njanudpv6.groupby(by='osversion').size()
fev_udp.groupby(by='osversion').size()
nfevudpv6.groupby(by='osversion').size()

#CONN_TECH
mar_udp.groupby(by='conn_tech').size()
nmarudpv6.groupby(by='conn_tech').size()
abr_udp.groupby(by='conn_tech').size()
nabrudpv6.groupby(by='conn_tech').size()
mai_udp.groupby(by='conn_tech').size()
nmaiudpv6.groupby(by='conn_tech').size()
jun_udp.groupby(by='conn_tech').size()
njunudpv6.groupby(by='conn_tech').size()
jul_udp.groupby(by='conn_tech').size()
njuludpv6.groupby(by='conn_tech').size()
ago_udp.groupby(by='conn_tech').size()
nagoudpv6.groupby(by='conn_tech').size()
set_udp.groupby(by='conn_tech').size()
nsetudpv6.groupby(by='conn_tech').size()
out_udp.groupby(by='conn_tech').size()
noutudpv6.groupby(by='conn_tech').size()
nov_udp.groupby(by='conn_tech').size()
nnovudpv6.groupby(by='conn_tech').size()
dez_udp.groupby(by='conn_tech').size()
ndezudpv6.groupby(by='conn_tech').size()
jan_udp.groupby(by='conn_tech').size()
njanudpv6.groupby(by='conn_tech').size()
fev_udp.groupby(by='conn_tech').size()
nfevudpv6.groupby(by='conn_tech').size()

#BRAND
#Observação: Aqui fui trocando o "P30 Pro" para as demais marcas que aparecem na Tabela 4.11 do documento escrito
len(mar_udp[mar_udp['brand'] == 'P30 Pro'])
len(nmarudpv6[nmarudpv6['brand'] == 'P30 Pro'])
len(abr_udp[abr_udp['brand'] == 'P30 Pro'])
len(nabrudpv6[nabrudpv6['brand'] == 'P30 Pro'])
len(mai_udp[mai_udp['brand'] == 'P30 Pro'])
len(nmaiudpv6[nmaiudpv6['brand'] == 'P30 Pro'])
len(jun_udp[jun_udp['brand'] == 'P30 Pro'])
len(njunudpv6[njunudpv6['brand'] == 'P30 Pro'])
len(jul_udp[jul_udp['brand'] == 'P30 Pro'])
len(njuludpv6[njuludpv6['brand'] == 'P30 Pro'])
len(ago_udp[ago_udp['brand'] == 'P30 Pro'])
len(nagoudpv6[nagoudpv6['brand'] == 'P30 Pro'])
len(set_udp[set_udp['brand'] == 'P30 Pro'])
len(nsetudpv6[nsetudpv6['brand'] == 'P30 Pro'])
len(out_udp[out_udp['brand'] == 'P30 Pro'])
len(noutudpv6[noutudpv6['brand'] == 'P30 Pro'])
len(nov_udp[nov_udp['brand'] == 'P30 Pro'])
len(nnovudpv6[nnovudpv6['brand'] == 'P30 Pro'])
len(dez_udp[dez_udp['brand'] == 'P30 Pro'])
len(ndezudpv6[ndezudpv6['brand'] == 'P30 Pro'])
len(jan_udp[jan_udp['brand'] == 'P30 Pro'])
len(njanudpv6[njanudpv6['brand'] == 'P30 Pro'])
len(fev_udp[fev_udp['brand'] == 'P30 Pro'])
len(nfevudpv6[nfevudpv6['brand'] == 'P30 Pro']) 